--- a/run6502.c	2024-04-05 10:45:34
+++ b/run6502.c	2024-04-06 21:35:01
@@ -1,11 +1,12 @@
 /* run6502.c -- 6502 emulator shell			-*- C -*- */
 
 /* Copyright (c) 2005 Ian Piumarta
+ * Copyright (c) 2024 Cameron Kaiser
  * 
  * All rights reserved.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the 'Software'),
  * to deal in the Software without restriction, including without limitation
  * the rights to use, copy, modify, merge, publish, distribute, and/or sell
  * copies of the Software, and to permit persons to whom the Software is
@@ -32,18 +33,21 @@
 #define VERSION	PACKAGE_NAME " " PACKAGE_VERSION " " PACKAGE_COPYRIGHT
 
 typedef uint8_t  byte;
 typedef uint16_t word;
 
 static char *program= 0;
 
 static byte bank[0x10][0x4000];
+static byte *ramm = (byte *)bank;
+static char mode6o6= 0;
+static char _6o6bank = 0;
+unsigned long long instructions = 0;
 
-
 void fail(const char *fmt, ...)
 {
   va_list ap;
   fflush(stdout);
   va_start(ap, fmt);
   vfprintf(stderr, fmt, ap);
   va_end(ap);
   fprintf(stderr, "\n");
@@ -81,17 +85,17 @@
        *	   XY+4=maximum acceptable ASCII value.
        * On exit:  Y is the line length (excluding CR),
        *	   C is set if Escape terminated input.
        */
       {
 	word  offset= params[0] + (params[1] << 8);
 	byte *buffer= mpu->memory + offset;
 	byte  length= params[2], minVal= params[3], maxVal= params[4], b= 0;
-	if (!fgets(buffer, length, stdin))
+	if (!fgets((char *)buffer, length, stdin))
 	  {
 	    putchar('\n');
 	    exit(0);
 	  }
 	for (b= 0;  b < length;  ++b)
 	  if ((buffer[b] < minVal) || (buffer[b] > maxVal) || ('\n' == buffer[b]))
 	    break;
 	buffer[b]= 13;
@@ -241,16 +245,18 @@
 static void usage(int status)
 {
   FILE *stream= status ? stderr : stdout;
   fprintf(stream, VERSION"\n");
   fprintf(stream, "please send bug reports to: %s\n", PACKAGE_BUGREPORT);
   fprintf(stream, "\n");
   fprintf(stream, "usage: %s [option ...]\n", program);
   fprintf(stream, "       %s [option ...] -B [image ...]\n", program);
+  fprintf(stream, "  -6                -- bankswitched 6o6 test environment\n");
+  fprintf(stream, "  -L                -- singlestep and detect infinite loops like bne *\n");
   fprintf(stream, "  -B                -- minimal Acorn 'BBC Model B' compatibility\n");
   fprintf(stream, "  -d addr last      -- dump memory between addr and last\n");
   fprintf(stream, "  -G addr           -- emulate getchar(3) at addr\n");
   fprintf(stream, "  -h                -- help (print this message)\n");
   fprintf(stream, "  -I addr           -- set IRQ vector\n");
   fprintf(stream, "  -l addr file      -- load file at addr\n");
   fprintf(stream, "  -M addr           -- emulate memory-mapped stdio at addr\n");
   fprintf(stream, "  -N addr           -- set NMI vector\n");
@@ -280,18 +286,18 @@
   exit(0);
   return 0;
 }
 
 
 static unsigned long htol(char *hex)
 {
   char *end;
-  unsigned long l= strtol(hex, &end, 16);
-  if (*end) fail("bad hex number: %s", hex);
+  unsigned long l= strtol(hex, &end, 0);
+  if (*end) fail("bad value: %s", hex);
   return l;
 }
 
 
 static int loadInterpreter(M6502 *mpu, word start, const char *path)
 {
   FILE   *file= 0;
   int     count= 0;
@@ -331,16 +337,34 @@
 
 static int load(M6502 *mpu, word address, const char *path)
 {
   FILE  *file= 0;
   int    count= 0;
   size_t max= 0x10000 - address;
   if (!(file= fopen(path, "r")))
     return 0;
+
+  if (mode6o6 && address == EMURAM) {
+	/* attempt to split file in memory banks, loading first to main RAM */
+	max = 32768;
+	while ((count= fread(mpu->memory + address, 1, max, file)) > 0) {
+		address += count; max -= count;
+		/* this gets synced up on init */
+	}
+	/* load remainder, if any, to second bank */
+	max = 32768;
+	address = 32768;
+	while ((count= fread(ramm + address, 1, max, file)) > 0) {
+		address += count; max -= count;
+	}
+	fclose(file);
+	return 1;
+  }
+
   while ((count= fread(mpu->memory + address, 1, max, file)) > 0)
     {
       address += count;
       max -= count;
     }
   fclose(file);
   return 1;
 }
@@ -451,37 +475,85 @@
       putchar(' ');
       i= 0;
       while (i++ < size)  putchar(isgraph(mpu->memory[addr + i - 1]) ? mpu->memory[addr + i - 1] : ' ');
       while (i++ < 4)     putchar(' ');
       printf(" %s\n", insn);
       addr += size;
     }
   return 2;
+}
+
+/* 6o6 specific bankswitch environment */
+static int _6o6bank0(M6502 *mpu, word address, byte value)
+{
+	if (_6o6bank == 0) return 0;
+	/* stash to bank 1, load from bank 0 */
+	memcpy((void *)(ramm + 0x8000), (void *)(mpu->memory + EMURAM), 0x8000);
+	memcpy((void *)(mpu->memory + EMURAM), (void *)(ramm), 0x8000);
+	_6o6bank = 0;
+	return 0;
 }
 
+static int _6o6bank1(M6502 *mpu, word address, byte value)
+{
+	if (_6o6bank == 1) return 0;
+	/* stash to bank 0, load from bank 1 */
+	memcpy((void *)(ramm), (void *)(mpu->memory + EMURAM), 0x8000);
+	memcpy((void *)(mpu->memory + EMURAM), (void *)(ramm + 0x8000), 0x8000);
+	_6o6bank = 1;
+	return 0;
+}
 
+static int _6o6fail(M6502 *mpu, word address, byte value)
+{
+	char state[64], insn[64];
+	M6502_dump(mpu, state);
+	M6502_disassemble(mpu, mpu->registers->pc, insn);
+	fprintf(stdout, "failure detected at pc $%04x epc $%04x ea=%02x ex=%02x ey=%02x\n",
+		mpu->registers->pc,
+		mpu->memory[EMUPC] + mpu->memory[EMUPC+1] *256,
+		mpu->memory[EMUAR],
+		mpu->memory[EMUXR],
+		mpu->memory[EMUYR]);
+	fprintf(stdout, "%s : %s\n", state, insn);
+	M6502_delete(mpu);
+	exit(1);
+}
+
+static int _6o6success(M6502 *mpu, word address, byte value)
+{
+	fprintf(stdout, "success, %llu ops\n", instructions);
+	M6502_delete(mpu);
+	exit(0);
+}
+
 int main(int argc, char **argv)
 {
   M6502 *mpu= M6502_new(0, 0, 0);
   int bTraps= 0;
+  int mode6o6loop= 0;
 
   program= argv[0];
 
   if ((2 == argc) && ('-' != *argv[1]))
     {
       if ((!loadInterpreter(mpu, 0, argv[1])) && (!load(mpu, 0, argv[1])))
 	pfail(argv[1]);
       doBtraps(0, 0, mpu);
     }
   else
     while (++argv, --argc > 0)
       {
 	int n= 0;
 	if      (!strcmp(*argv, "-B"))  bTraps= 1;
+	else if (!strcmp(*argv, "-6"))  mode6o6= 1;
+	else if (!strcmp(*argv, "-L"))  mode6o6loop= 1;
+	else if (!strcmp(*argv, "-LL")) mode6o6loop= 2;
+	else if (!strcmp(*argv, "-LLL"))mode6o6loop= 3;
 	else if (!strcmp(*argv, "-d"))	n= doDisassemble(argc, argv, mpu);
 	else if (!strcmp(*argv, "-G"))	n= doGtrap(argc, argv, mpu);
 	else if (!strcmp(*argv, "-h"))	n= doHelp(argc, argv, mpu);
 	else if (!strcmp(*argv, "-i"))	n= doLoadInterpreter(argc, argv, mpu);
 	else if (!strcmp(*argv, "-I"))	n= doIRQ(argc, argv, mpu);
 	else if (!strcmp(*argv, "-l"))	n= doLoad(argc, argv, mpu);
 	else if (!strcmp(*argv, "-M"))	n= doMtrap(argc, argv, mpu);
 	else if (!strcmp(*argv, "-N"))	n= doNMI(argc, argv, mpu);
@@ -504,17 +576,98 @@
 		   0x8000 + mpu->memory,
 		   0x4000);
 	    n= 1;
 	  }
 	argc -= n;
 	argv += n;
       }
 
+  if (mode6o6) {
+	/* set up bankswitch.
+	   write 0: bank 0 ($8000-$ffff) to $7000.
+	   write 1: bank 1 ($8000-$ffff) to $7000. */
+	mpu->callbacks->write[0x0000]= _6o6bank0;
+	mpu->callbacks->write[0x0001]= _6o6bank1;
+
+	/* if we read or branch to 1, terminate successfully.
+	   otherwse if we read or branch to 0, terminate in error. */
+	mpu->callbacks->read[0x0000]= _6o6fail;
+	mpu->callbacks->read[0x0001]= _6o6success;
+
+	/* prime bank 0 with the code loaded to $7000 */
+	memcpy((void *)(ramm), (void *)(mpu->memory + EMURAM), 0x8000);
+	mpu->registers->pc = 0x400;
+	_6o6bank= 0;
+  } else
   if (bTraps)
     doBtraps(0, 0, mpu);
 
+  if (mode6o6loop) {
+	char state[64], insn[64], i, brkloop = 0;
+	uint16_t last_pc = 0xffff, next_epc;
+
+	/* set up single step using dschmenk's patch */
+	mpu->flags |= M6502_SingleStep;
+
+	/* magic constants from the default build of klaus' test suite */
+	mpu->registers->pc = 0x400;
+
+	do {
+		instructions++;
+		if (mode6o6loop > 2) {
+			M6502_dump(mpu, state);
+			M6502_disassemble(mpu, mpu->registers->pc, insn);
+			fprintf(stdout, "%s : %s (count=%llu)\n", 
+				state, insn, instructions);
+		}
+		if (mode6o6loop > 1 && mpu->registers->pc == VMU) {
+			next_epc = (mpu->memory[EMUPC] + mpu->memory[EMUPC+1] *256);
+			/* memory may be banked out */
+			if (next_epc < 0x8000 && _6o6bank == 1) {
+				(void)_6o6bank0(mpu, 0, 0);
+			}
+			if (next_epc >= 0x8000 && _6o6bank == 0) {
+				(void)_6o6bank1(mpu, 1, 0);
+			}
+			M6502_disassemble(mpu, EMURAM + next_epc, insn);
+			fprintf(stdout, "(epc=$%04x:%02x) %s\n", next_epc,
+				mpu->memory[EMURAM + next_epc], insn);
+			if (mpu->memory[EMURAM + next_epc] == 0) {
+				if (brkloop++ == 10) {
+					fprintf(stderr, "fail: emulated brk loop\n");
+					M6502_delete(mpu);
+					return 0;
+				}
+			} else brkloop = 0;
+		}
+		if (mpu->registers->pc == last_pc) {
+			/* loop detected: halt */
+			if (last_pc == 0x3469) {
+				fprintf(stdout, "success, %llu ops\n",
+					instructions);
+				M6502_delete(mpu);
+				return 0;
+			}
+			fprintf(stdout, "loop: failure at $%04x\n", last_pc);
+			M6502_dump(mpu, state);
+			M6502_disassemble(mpu, mpu->registers->pc, insn);
+			fprintf(stdout, "%s : %s\n", state, insn);
+			fprintf(stdout, "000c:");
+			for(i=12;i<19;i++) 
+				fprintf(stdout, " %02x", mpu->memory[i]);
+			fprintf(stdout, "\n");
+			M6502_delete(mpu);
+			return 1;
+		}
+		last_pc = mpu->registers->pc;
+	} while (M6502_run(mpu));
+
+  	M6502_delete(mpu);
+	return 0;
+  }
+
   M6502_reset(mpu);
   M6502_run(mpu);
   M6502_delete(mpu);
 
   return 0;
 }
